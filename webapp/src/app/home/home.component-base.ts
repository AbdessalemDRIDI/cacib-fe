import { AfterViewInit, Component, OnDestroy, OnInit, inject } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';

import { FeatureService } from '@app/core/services/feature/feature.service';
import { getDeviceInfo } from '@core/utils';
import { environment } from '@env/environment';
import { AuthManagerService } from '@services/auth/auth-manager.service';
import { MenuService } from '@services/menu/menu.service';
import { MessagesService as Messages } from '@services/messages/message.service';
import { cloneDeep, isEmpty } from 'lodash';

import { NgClass } from '@angular/common';
import { RouterOutlet } from '@angular/router';
import { AlertModule, MenuModule, ToDoListModule } from '@palmyra/ng-palmyra';
import { PalmyraTemplateDirective } from '@shared/directives/palmyra-template.directive';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { IdleSessionTimeOutComponent } from '../core/components/idle-session-timeout/idleSessionTimeOut.component';
import { LanguagesComponent } from '../core/components/languages/languages.component';
import { BodyComponent } from '../core/components/layouts/body/body.component';
import { FooterComponent } from '../core/components/layouts/footer/footer.component';
import { HeaderComponent } from '../core/components/layouts/header/header.component';
import { LogoComponent } from '../core/components/logo/logo.component';
import { MessageComponent } from '../core/components/messages/message/message.component';
import { UserInfoComponent } from '../core/components/user-info/user-info.component';

export const COMPONENT_PROVIDERS = [];
export const COMPONENT_IMPORTS = [
  HeaderComponent,
  PalmyraTemplateDirective,
  LogoComponent,
  OverlayPanelModule,
  ToDoListModule,
  AlertModule,
  LanguagesComponent,
  UserInfoComponent,
  MenuModule,
  BodyComponent,
  NgClass,
  MessageComponent,
  RouterOutlet,
  FooterComponent,
  IdleSessionTimeOutComponent,
];
/**
 * This is the base Home Component that displays the main structure of your desktop & mobile application once the user is logged in like the `Main menu`, `header`, `main body` and `footer`.
 *
 * This component is auto generated by `UI Studio` and it is highly recommended to avoid modifying this class, otherwise you can override all the generated methods & variables in
 * the inherited class MainComponent.
 */
@Component({ template: '' })
export class MainBaseComponent implements OnInit, AfterViewInit, OnDestroy {
  /**
   * Injected services
   */
  menuService = inject(MenuService);
  authService = inject(AuthManagerService);
  messageService = inject(Messages);
  router = inject(Router);
  titleService = inject(Title);
  featureService = inject(FeatureService);
  /**
   * The base path of your REST API calls
   */
  BASE_PATH = environment.basePath;
  /**
   * Option to collapse or expand the main menu's panel
   */
  expandedState = 'collapsed';
  /**
   * The menu items constant used to translate your menu
   */
  MENU_ITEMS = 'Menu Items.';
  /**
   * The Subjet emitter object to destroy all the subscriptions
   * when the component is destroyed
   */
  destroy$: Subject<boolean> = new Subject<boolean>();
  /**
   * The title of the current opened page
   */
  screenTitle = '';
  /**
   * Option to expand or collapse the main menu's panel
   */
  menuExpanded = false;
  /**
   * The landing page link
   */
  landingPageLink: string;
  /**
   * The current styleName of the current page
   */
  styleClass;
  // palmyra-needle-add-menu-entry: Do not delete this line
  menu = [
    {
      label: $localize`:menu;message:Message`,
      icon: 'pi pi-cog',
      id: 'message',
      items: [
        {
          label: $localize`:menu;search-message:Search Message`,
          id: 'search-message',
          link: ['/message/message-searchInput'],
          command: (event) => this.openPage(event.item),
        },
      ],
    },
    {
      label: $localize`:menu;partner:Partner`,
      icon: 'pi pi-cog',
      id: 'partner',
      items: [
        {
          label: $localize`:menu;search-partner:Search Partner`,
          id: 'search-partner',
          link: ['/partner/partner-searchInput'],
          command: (event) => this.openPage(event.item),
        },
      ],
    },
  ];

  // end palmyra-needle-add-menu-entry

  unfiletredmenu = cloneDeep(this.menu);

  /**
   * Initializes the min component
   * @returns {void}
   */
  ngOnInit() {
    this.menuService.setMenu(this.unfiletredmenu);
    const securityData = this.authService.getSecurityData();
    this.menu = securityData
      ? this.menuService.filterByRole(this.menu, securityData?.menu)
      : this.menu;
    this.getScreenTitle(this.menu);
    this.menuExpanded = this.menuService.getMenuInitialState();
  }

  /***
   * Adds styleName to html root element
   */
  ngAfterViewInit() {
    const classNames = ['home'];
    const deviceInfo = getDeviceInfo();
    if (deviceInfo.isMobile) {
      classNames.push('mobile');
      classNames.push(deviceInfo.mobileOs);
    } else {
      classNames.push('desktop');
    }
    (document.querySelector('html') as HTMLElement).className = classNames.join(' ');
  }
  /**
   * Uses the keyboard enter button like mouse Click
   * @param event
   */
  keyboardEnter(event: any) {
    event.code === 'NumpadEnter' ? event.srcElement.click() : '';
  }
  /**
   * set focus to the first element
   *  @param element
   *  @returns {void}
   */
  focus(element): void {
    element.querySelectorAll('[tabindex]')[0].focus();
  }
  /**
   * Logout the logged user
   */
  logout() {
    this.authService.logout();
  }
  /**
   * Open the page in a workspace and close the main menu's sidebar
   */
  openPage(menu: any) {
    this.open(menu);
    this.screenTitle = menu.label;
    this.styleClass = menu.styleClass;
  }
  /**
   * Set the screen title based on menu items
   * @param menu
   */
  getScreenTitle(menu: any) {
    menu.map((item) => {
      if (item.items) {
        this.getScreenTitle(item.items);
      } else if (item && !isEmpty(item.link) && this.router.url.startsWith(item.link)) {
        this.screenTitle = item.label;
      }
    });
  }

  /**
   * Open a page
   * @param menu
   */
  open(menu: any) {
    const link = menu.link ? menu.link[0] : undefined;
    const externalLink = link ? link.startsWith('http') : link;
    const queryParams = {
      ...menu.params,
    };
    externalLink
      ? window.open(link, menu.openWindow ? '_blank' : '_self')
      : this.router.navigate(menu.link, { queryParams });
  }
  /**
   * Toggles menu state
   */
  toggleMenu() {
    this.menuExpanded = !this.menuExpanded;
    this.menuService.setMenuState(this.menuExpanded);
  }

  /**
   * Destroys the component and all the subscriptions
   */
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
}
