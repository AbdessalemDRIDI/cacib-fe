import { AfterViewInit, Component, inject, OnInit, Signal } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AuthManagerService } from '@services/auth/auth-manager.service';
import { ChangePasswordComponent } from '../../core/components/change-password/change-password.component';
import { LoaderMaskComponent } from '../../core/components/loaders/loader-mask/loader-mask.component';
import { LogoComponent } from '../../core/components/logo/logo.component';

export const COMPONENT_PROVIDERS = [];
export const COMPONENT_IMPORTS = [
  LoaderMaskComponent,
  LogoComponent,
  FormsModule,
  ReactiveFormsModule,
  ChangePasswordComponent,
];

/**
 * Component that handles the user authentication and logout
 *
 * This component is auto generated by `UI Studio` and it is highly recommended to avoid modifying this class, otherwise you can override all the generated methods & variables in
 * the inherited class LoginComponent.
 */
@Component({ template: '' })
export class LoginBaseComponent implements OnInit, AfterViewInit {
  /**
   * Injected services
   */
  formBuilder = inject(UntypedFormBuilder);
  authService = inject(AuthManagerService);
  router = inject(Router);
  activatedRoute = inject(ActivatedRoute);
  /**
   * The Form Builder
   */
  form: UntypedFormGroup;
  /**
   * Represents the loading state of the login component.
   */
  loading: Signal<boolean>;

  /**
   * Represents the error message of the login component.
   */
  loginErrorMsg: Signal<string>;
  /**
   * The reset password option
   */
  resetPassword: boolean;
  /**
   * Initializes the form and selects/ listens to the changes of some properties stored in the state
   */
  ngOnInit() {
    this.form = this.formBuilder.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
    });
    if (this.authService.isLogged()) {
      this.router.navigate(['/']);
    }
    this.loginErrorMsg = this.authService.errorMessage;
    this.loading = this.authService.loading;
  }
  /***
   * Adds a styleName to the ROOT HTML element
   */
  ngAfterViewInit() {
    (document.querySelector('html') as HTMLElement).className = 'login';
  }
  /**
   *  Submits the form data
   */
  onSubmit(): void {
    const redirectUri: string = this.activatedRoute.snapshot.queryParams.redirect_uri;
    const user = {
      username: this.form.controls.username.value,
      password: this.form.controls.password.value,
    };
    this.authService.authenticateUser(user, redirectUri);
    this.resetPassword = this.authService.resetPassword;
  }
  /**
   * Reset the password
   * @param event
   */
  onResetSuccess(event) {
    if (event) {
      this.resetPassword = false;
      this.authService.doLogout();
    }
  }
  /**
   * Sets the property `resetPassword` to `true`
   */
  changePassword(): void {
    this.resetPassword = true;
  }
}
