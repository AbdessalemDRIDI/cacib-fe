import { Component, OnInit, inject, signal } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CriteriaService } from '@app/core/services/criteria/criteria.service';
import { Payload } from '@core/api';
import { CollectionScreenComponent } from '@core/features/collection-screen.component';
import { untilChanged } from '@core/utils';
import { Message as MessageModel } from '@models/message.model';
import { isEqual, union } from 'lodash';
import { ConfirmationService, LazyLoadEvent, MenuItem } from 'primeng/api';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

import { environment } from '@env/environment';
import { COMMON_IMPORTS } from '../../../shared/common/common-imports';
import { MessageMessageSearchService } from './services/message-message-search.service';

export const COMPONENT_PROVIDERS = [MessageMessageSearchService];
export const COMPONENT_IMPORTS = [...COMMON_IMPORTS];

/**
 * This base component displays a collection of items.
 * This component is auto generated by `UI Studio` tool for a screen of type `EditCollection`, please refer to our official documentation for more informations:
 * https://wiki.vermeg.com/pages/viewpage.action?spaceKey=PFD&title=Components+Store#ComponentsStore-Searchscreen
 *
 * You can override, if needed, all the generated methods & variables of the Base component in this class.
 *
 * @AutoSkip Do not remove this tag to keep your file out of regeneration.
 * @Note This component is generated once and will no more be erased by the generator.
 **/
@Component({
  template: '',
  selector: 'app-message-message-search-base',
})
export class MessageMessageSearchBaseComponent extends CollectionScreenComponent implements OnInit {
  /**
   * Injected Services
   **/
  screenService = inject(MessageMessageSearchService);
  screenId = this.screenService.screenId;

  /**
   * The criteria service used to build the critera for search screens.
   */
  criteriaService = inject(CriteriaService);
  /**
   * The confirmation service used for displaying confirmation dialogs.
   */
  confirmationService = inject(ConfirmationService);
  /**
   * Represents an observable that holds the data of the screen.
   */
  value$: Observable<MessageModel[]>;
  /**
   * The collection of data items loaded
   */
  value: MessageModel[];
  /**
   * The selected rows selector
   */
  rowsSelected$: Observable<MessageModel[]>;
  /**
   * Switch Mode to be set in local storage
   */
  prefix;
  /**
   * The technical keys of the configured columns
   */
  keys = `id,messageContent,messageType,dateReceived,status`;
  allLazilySelectedRows: MessageModel[] = [];
  /**
   * The string criteria of the input filters
   */
  criteria;
  /**
   * order keys
   */
  order;

  /**
   *  The size of items per page
   **/
  pageSize = signal(10);
  /**
   *  The collection of items
   **/
  items: MessageModel[];
  /**
   *  The collection of the selected items
   **/
  selectedItems: MessageModel[] = [];

  rowOperations$: Observable<MenuItem[]>;

  /** @inheritDoc */
  constructor(router: Router, route: ActivatedRoute) {
    super(route, router);
  }
  /**
   * Initializes the component.
   */
  ngOnInit() {
    super.ngOnInit();
    this.loading = this.screenService.getLoading();
    this.criteria = this.getCriteria();
    this.params = { ...this.params, ...this.initParams() };
    this.init();

    this.value$ = this.screenService.getData().pipe(
      untilChanged,
      tap((items) => {
        this.value = items;
      })
    );

    this.screenService.listenToRefresh().subscribe(() => {
      this.init();
    });
    this.prefix = `${environment.prefix}_message_message-search`;
    this.totalItems = this.screenService.totalItems;
  }

  /**
   * Initializes the component.
   * This method performs a search using the provided parameters.
   */
  init() {
    this.screenService.search({ ...this.params }).subscribe();
    this.currentPage = this.screenService.currentPage;
    this.pageSize = this.screenService.pageSize;
  }
  /**
   * Returns a decoded criteria parameter
   */
  getCriteria() {
    return this.routeParams.queryParams.criteria;
  }
  /**
   * Returns the basic payload value
   */
  initParams(): any {
    this.vars = {
      ...this.vars,
      page: 1,
      size: this.pageSize(),
      keys: this.keys,
      criteria: this.criteria,
      order: this.orderBy,
    };
    return {
      totalItems: this.totalItems(),
      page: 1,
      size: this.pageSize(),
      keys: this.keys,
      order: this.orderBy,
      criteria: this.criteria,
      vars: { ...this.vars },
    };
  }

  /**
   * Paginates the retrieved data
   * @param {PageChange} event - The PageChange event
   */
  paginate(event) {
    this.screenService
      .search({
        ...this.params,
        size: event.rows,
        page: event.page + 1,
        order: this.order,
        vars: { ...this.vars, size: event.rows, page: event.page + 1 },
      })
      .subscribe();
  }

  /**
   * Select or Unselech the current page's
   * rows for lazy data list
   * @param event
   */
  onHeaderCheckboxToggle(event) {
    if (this.allLazilySelectedRows) {
      if (event.checked) {
        this.selectedItems = union(this.allLazilySelectedRows, this.selectedItems);
        this.onRowSelect(event);
      } else {
        this.selectedItems = this.allLazilySelectedRows.filter(
          (item) => !this.value.some((row) => isEqual(item, row))
        );
        this.onRowUnselect();
      }
    }
    this.onSelectionChange();
  }

  /**
   * Loads the data items from the server API
   * @param event
   */
  onLazyLoad(event: LazyLoadEvent) {
    this.order = this.criteriaService.buildOrderKeys(event);
    const payload = {
      ...this.params,
      size: this.vars.size,
      order: this.order,
      vars: { ...this.vars, order: this.order, criteria: this.params.criteria },
    };
    this.screenService.search({ ...payload }).subscribe();
    this.screenService.count({ ...payload }).subscribe();
  }

  /**
   * Retrieves the action payload.
   * @returns The action payload object.
   */
  getActionPayload(): Payload {
    return {
      ...super.getActionPayload(),
      parentId: this.parentId,
      vars: { ...this.vars, items: this.value },
      data: this.selectedItems instanceof Array ? this.selectedItems[0] : this.selectedItems,
      rowId: this.selectedItems ? this.selectedItems['code'] : undefined,
      value: this.value,
    };
  }
  /**
   * Handles the selection change event.
   * Updates the visibility of row operations.
   */
  onSelectionChange() {}
  /**
   * Executes the edit action
   * @return {void}
   */

  doEdit(rowData): void {
    this.selectedItems = [rowData];
    const payload = { ...this.getActionPayload(), data: rowData };
    this.screenService.edit(payload);
  }
  /**
   * Executes the view action
   * @return {void}
   */
  doView(rowData): void {
    this.selectedItems = [rowData];
    const payload = { ...this.getActionPayload(), data: rowData };
    this.screenService.view(payload);
  }

  /***
   * Executes the delete action
   * @return {void}
   **/
  doDelete(rowData): void {
    this.confirmationService.confirm({
      header: $localize`:message;confirmationMsg:Confirmation`,
      message: $localize`:message;deleteItem:Are you sure?`,
      accept: () => {
        const payload = { ...this.getActionPayload(), rowId: rowData.code, data: rowData };
        this.screenService.delete({ ...payload }).subscribe();
      },
      key: 'messagemessageSearch',
    });
  }

  /**
   * Performs the create operation.
   * @return {void}
   */
  doCreate(): void {
    this.screenService.create({ ...this.getActionPayload(), pathParams: { id: '' } });
  }

  /**
   * Executes the export action
   * @return {void}
   */
  doExport(keys?, value?, exportType?): void {
    const data = {
      ...this.params,
      keys: keys,
      value: value,
      exportType: exportType,
      columns: this.columns,
      selectedItems: this.selectedItems,
      data: this.value,
    };
    this.screenService.export(data).subscribe();
  }

  getDefaultTitle() {
    return $localize`:@@UID__title;message;message-search:List of Messages`;
  }
}
