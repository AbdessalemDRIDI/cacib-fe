import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Payload } from '@core/api';
import { isNil, omitBy, set } from 'lodash';
import { Observable } from 'rxjs';
import { filter, takeUntil, tap } from 'rxjs/operators';

import {
  mergeObjects,
  patchDefaultValues,
  patchFiltersValue,
  setFieldValue,
  validateForm,
} from '@app/core/utils';
import { ScreenComponent } from '@core/features/screen.component';
import { CriteriaService } from '@services/criteria/criteria.service';

import { COMMON_IMPORTS } from '../../../shared/common/common-imports';
import { MessageMessageSearchInputService } from './services/message-message-search-input.service';

export const COMPONENT_PROVIDERS = [MessageMessageSearchInputService];
export const COMPONENT_IMPORTS = [...COMMON_IMPORTS];

/**
 * This base component displays and manages a Reactive Filters Form logic. It is mainly used with a `search` screen.
 * This component is auto generated by `UI Studio` tool for a screen of type `EditCollection`, please refer to our official documentation for more informations:
 * https://wiki.vermeg.com/pages/viewpage.action?spaceKey=PFD&title=Components+Store#ComponentsStore-SearchInputComponentStoreSearchInputscreen
 *
 * You can override, if needed, all the generated methods & variables of the Base component in this class.
 *
 * @AutoSkip Do not remove this tag to keep your file out of regeneration.
 * @Note This component is generated once and will no more be erased by the generator.
 **/
@Component({
  template: '',
  selector: 'app-message-message-search-input-base',
})
export class MessageMessageSearchInputBaseComponent extends ScreenComponent implements OnInit {
  /**
   * Represents the input data for the Component.
   */
  @Input() data: any = {};

  /**
   * Represents the output data for the Component.
   */
  @Output() dataChange = new EventEmitter();

  /**
   * Injected Services
   **/
  screenService = inject(MessageMessageSearchInputService);
  screenId = this.screenService.screenId;

  /**
   * The criteria service used to build the critera for search screens.
   */
  criteriaService = inject(CriteriaService);
  /**
   * The formBuilder instance.
   */
  formBuilder = inject(UntypedFormBuilder);

  /**
   * The array of components of type fromTo
   */
  fromToFields = ['dateReceived'];
  /**
   * True if the component is initialized after calling the initValueAction
   */
  initialized = false;
  /**
   * Represents an observable that holds the data of the screen.
   */
  data$: Observable<any>;
  /**
   * The Form Builder
   */
  form;

  /**
   * The criteria from queryParams
   */
  criteriaParam: string;
  criteriaFromRouter: string;

  /**
   * The technical keys of the input fields
   */
  keys = `id,messageContent,messageType,dateReceived,status`;

  /**
   * Default  Constructor of the component
   */
  constructor(router: Router, activeRoute: ActivatedRoute) {
    super(activeRoute, router);
  }
  /**
   * Initializes the component.
   */
  ngOnInit() {
    super.ngOnInit();
    this.loading = this.screenService.getLoading();
    this.form = this.createForm();
    this.data = this.data || {};

    this.keys.split(',').forEach((item) => {
      set(this.data, item, null);
    });
    this.criteriaFromRouter = this.routeParams.queryParams.criteria;
    patchDefaultValues(this.routeParams.queryParams.criteriaParam, this.data, this.form);
    this.screenService.setData(this.data);
    this.data$ = this.screenService.getData().pipe(
      filter(Boolean),
      tap((data) => {
        patchFiltersValue(this.form, data);
        this.data = mergeObjects(this.data, { ...omitBy(data, isNil) });
      })
    );
    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
      this.keys.split(',').forEach((item) => {
        setFieldValue(this.data, item, value);
      });
    });
  }

  ngAfterViewInit() {
    this.screenService.initialized$
      .pipe(
        takeUntil(this.destroy$),
        filter((initialized) => initialized)
      )
      .subscribe((initialized) => {
        this.autoLoadScreens();
        this.initialized = true;
      });
  }

  /**
   * Automatically loads target screens by navigation.
   * @return {void}
   */
  autoLoadScreens(): void {
    this.openTargetScreen();
  }

  /**
   * Opens the target screen with the input criteria.
   * @return {void}
   */
  openTargetScreen(): void {
    this.screenService.openTargetScreen({ ...this.getActionPayload() });
  }

  /**
   * Retrieves the criteria
   * @returns {string}
   */
  prepareCriteria(): string {
    let allCriteria = this.criteriaService.getPreparedCriteria(
      this.criteriaFromRouter,
      this.form,
      ['dateReceived'],
      this.keys
    );
    this.criteriaFromRouter = '';
    return allCriteria;
  }

  /**
   * Retrieves the action payload.
   * @returns The action payload object.
   */
  getActionPayload(): Payload {
    return {
      ...super.getActionPayload(),
      parentId: this.parentId,
      vars: { ...this.vars },
      keys: this.keys,
      data: { ...this.data },
      criteria: this.prepareCriteria(),
    };
  }

  /**
   * Creates a form group for the MessageSearchInput component.
   * @returns The created form group.
   */
  createForm(): UntypedFormGroup {
    return this.formBuilder.group({
      id: [null, [Validators.min(-9223372036854776000), Validators.max(9223372036854776000)]],
      idOperator: [`==`],

      messageContent: [null, []],
      messageContentOperator: [`==`],

      messageType: [null, []],
      messageTypeOperator: [`==`],

      dateReceived: [null, []],
      dateReceivedOperator: [`==`],

      status: [null, []],
      statusOperator: [`==`],
    });
  }

  /***
   * Executes the more-filters action
   * @return {void}
   **/
  doMoreFilters(): void {
    this.screenService.moreFilters({ ...this.getActionPayload() }).subscribe();
  }

  /**
   * Performs the search operation.
   * @return {void}
   */
  doSearch(): void {
    if (this.isFormValid()) {
      this.screenService.search({ ...this.getActionPayload() });
    } else {
      validateForm(this.form);
    }
  }

  /**
   * Dispatch the search action of  the advanced filters
   */
  doAdvancedFilters(op) {
    if (this.form.valid) {
      op.hide();

      this.openTargetScreen();
    } else {
      validateForm(this.form);
    }
  }
}
